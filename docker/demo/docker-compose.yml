services:
  # Servicio para la base de datos MongoDB
  db-smartpot:
    image: sebastian190030/db-smartpot:latest
    container_name: smartpot-db
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=smartpot
    networks:
      - network
    labels:
      "docker_compose_diagram.icon": "mongodb"
      "docker_compose_diagram.cluster": "Database Layer"
      "docker_compose_diagram.description": "DB"

  # Servicio para cache de Redis
  cache-smartpot:
    image: sebastian190030/cache-smartpot:latest
    container_name: smartpot-cache
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=root
      - REDIS_DATABASE=0
    networks:
      - network
    labels:
      "docker_compose_diagram.icon": "redis"
      "docker_compose_diagram.cluster": "Cache Layer"
      "docker_compose_diagram.description": "DB Cache"

  # Servicio para correo de MailPit
  mail-smartpot:
    image: sebastian190030/mail-smartpot:latest
    container_name: smartpot-mail
    ports:
      - "8025:8025" # Interfaz web
      - "1025:1025" # SMTP
    environment:
      - MAIL_USERNAME=smartpotadmin@example.com
      - MAIL_PASSWORD=password123
      - MP_SMTP_AUTH=true
      - MP_SMTP_AUTH_FILE=/etc/mailpit/authfile
    networks:
      - network
    labels:
      "docker_compose_diagram.icon": "email"
      "docker_compose_diagram.cluster": "Mail Layer"
      "docker_compose_diagram.description": "Mail Service"

  # Servicio para la API
  api-smartpot:
    image: sebastian190030/api-smartpot:latest
    container_name: smartpot-api
    environment:
      - APP_NAME=SmartPot-API
      - PORT=8091
      - TITLE=SmartPot API
      - DESCRIPTION=Documentación de la API REST de SmartPot
      - VERSION=1.0.0
      - AUTHOR=SmartPot Developers
      - DATA_CONNECTION_METHOD=mongodb
      - DATA_SOURCE_USERNAME=admin
      - DATA_SOURCE_PASSWORD=admin
      - DATA_SOURCE_DOMAIN=db-smartpot:27017
      - DATA_SOURCE_DB=smartpot
      - DATA_PARAMS=authSource=admin&directConnection=true&serverSelectionTimeoutMS=100000&socketTimeoutMS=10000&appName=mongo
      - CACHE_TYPE=redis
      - CACHE_HOST=cache-smartpot
      - CACHE_PORT=6379
      - CACHE_DB=0
      - CACHE_USERNAME=default
      - CACHE_PASSWORD=root
      - CACHE_TIMEOUT=2000
      - CACHE_LETTUCE_POOL_MAX_ACTIVE=8
      - CACHE_LETTUCE_POOL_MAX_WAIT=-1
      - CACHE_LETTUCE_POOL_MAX_IDLE=8
      - CACHE_LETTUCE_POOL_MIN_IDLE=8
      - CACHE_TIME_TO_LIVE=300000
      - CACHE_NULL_VALUES=false
      - MAIL_HOST=mail-smartpot
      - MAIL_PORT=1025
      - MAIL_USERNAME=smartpotadmin@example.com
      - MAIL_PASSWORD=password123
      - MAIL_PROPERTIES_SMTP_AUTH=true
      - MAIL_PROPERTIES_SMTP_STARTTLS_ENABLE=false
      - SECURITY_JWT_SECRET_KEY=c8e9b6803afbcfa6edd9569c94c75ff4b144622b0a0570a636dffd62c24a3476
      - SECURITY_JWT_EXPIRATION=86400000
      - SECURITY_AES_KEY=Z0Yp4Zx5mN3j6rB8VwR2oE9fT2pX1qL6dC5yK7sM0uH3nA8bJ4vF9gT1rD2eW6zP
      - SECURITY_SCHEME_NAME=SmartPot-OAuth
      - SECURITY_PUBLIC_ROUTES=/auth/login,/auth/verify
      - RATE_LIMITING_MAX_REQUESTS=5
      - RATE_LIMITING_TIME_WINDOW=60000
      - RATE_LIMITING_PUBLIC_ROUTES=/swagger-ui/,/v3/api-docs,/swagger-resources/,/webjars/
      - HEADER_CORS_ALLOWED_ORIGINS=http://localhost:5173
      - SERVER_TOMCAT_TIMEOUT=600000
      - DEBUGGER_MODE=INFO
    ports:
      - "8091:8091"
    depends_on:
      - db-smartpot
      - cache-smartpot
      - mail-smartpot
    networks:
      - network
    labels:
      "docker_compose_diagram.icon": "api"
      "docker_compose_diagram.cluster": "Backend Layer"
      "docker_compose_diagram.description": "API REST"

  # Servicio para la aplicación web
  web-smartpot:
    image: sebastian190030/web-smartpot:latest
    container_name: smartpot-web
    environment:
      - VITE_API_BASE_URL=http://localhost:8091
    ports:
      - "5173:5173"
    depends_on:
      - api-smartpot
    networks:
      - network
    labels:
      "docker_compose_diagram.icon": "react"
      "docker_compose_diagram.cluster": "Frontend Layer"
      "docker_compose_diagram.description": "Web App"

# Volúmenes para persistencia de datos
volumes:
  mongo_data:

# Red de contenedores para comunicación entre servicios
networks:
  network:
    driver: bridge
